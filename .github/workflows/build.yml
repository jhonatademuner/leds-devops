name: CI/CD Pipeline
on:
  push:
    branches:
      - main

jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Update db url
        run: sed -i 's|<db_url>|${{ secrets.DATABASE_URL }}|' src/main/resources/application.properties
      - name: Update db username
        run: sed -i 's|<db_username>|${{ secrets.DATABASE_USERNAME }}|' src/main/resources/application.properties
      - name: Update db password
        run: sed -i 's|<db_password>|${{ secrets.DATABASE_PASSWORD }}|' src/main/resources/application.properties
      - name: Build Project and Run Tests with Coverage
        run: mvn clean verify -Pcoverage -Dsonar.token=${{ secrets.SONAR_TOKEN }}
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/leds-devops:latest .
      - name: Publish image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/leds-devops:latest


  sonar:
    needs: build
    name: SonarQube Analysis
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Update db url
        run: sed -i 's|<db_url>|${{ secrets.DATABASE_URL }}|' src/main/resources/application.properties
      - name: Update db username
        run: sed -i 's|<db_username>|${{ secrets.DATABASE_USERNAME }}|' src/main/resources/application.properties
      - name: Update db password
        run: sed -i 's|<db_password>|${{ secrets.DATABASE_PASSWORD }}|' src/main/resources/application.properties
      - name: Run Tests and Generate Coverage Report
        run: mvn clean verify -Pcoverage -Dsonar.token=${{ secrets.SONAR_TOKEN }}
      - name: Build and analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=jhonatademuner_leds-devops \
            -Dsonar.organization=jhonata-demuner-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}


  terraform:
    needs: build
    name: Terraform Apply
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: terraform init
        working-directory: terraform
      - name: Terraform Plan
        run: terraform plan -var="gh_token=${{ secrets.GH_TOKEN }}" -var="docker_username=${{ secrets.DOCKER_USERNAME }}"
        working-directory: terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="gh_token=${{ secrets.GH_TOKEN }}" -var="docker_username=${{ secrets.DOCKER_USERNAME }}"
        working-directory: terraform


  deploy:
    needs: terraform
    name: Deploy Docker Image on AWS EC2 Instance
    runs-on:
      - leds-ec2-ghrunner
    steps:
      - name: Pull image from Docker Hub
        run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/leds-devops:latest
      - name: Delete old container
        run: sudo docker rm -f leds-devops-container || true
      - name: Run Docker Container
        run: sudo docker run -d -p 8080:8080 --name leds-devops-container ${{ secrets.DOCKER_USERNAME }}/leds-devops:latest
